{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/cristian/cuby/website/pages/blog/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { parseISO, format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\nimport { Container, Cards } from './styles';\n\nvar Blog = function Blog(_ref) {\n  _s();\n\n  var allPosts = _ref.allPosts;\n  var router = useRouter();\n  var cat = router.query.cat;\n  var page = 'blog';\n  var posts = allPosts.slice(0, 9);\n  var morPosts = allPosts.slice(10);\n\n  if (cat.length > 0) {\n    var _page = 'portfolio';\n    var filteredPosts = allPosts.filter(function (item) {\n      return item.categories.includes(cat.toString());\n    });\n\n    var _posts = filteredPosts.slice(0, 9);\n\n    var _morPosts = filteredPosts.slice(10);\n  }\n\n  console.log(page);\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    page: page,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Cards, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, posts.map(function (post) {\n    return __jsx(Link, {\n      key: post.slug,\n      href: \"blog/posts/\".concat(post.slug),\n      passHref: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }, __jsx(\"img\", {\n      style: {\n        maxWidth: 300\n      },\n      src: post.coverImage,\n      alt: post.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }\n    }, post.title), __jsx(\"p\", {\n      className: \"data\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }\n    }, format(parseISO(post.date), \"d 'de' LLLL '/' yyyy\", {\n      locale: ptBR\n    }), post.categories.map(function (item) {\n      return __jsx(\"span\", {\n        key: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 27\n        }\n      }, item);\n    })), __jsx(\"p\", {\n      className: \"lead\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    }, post.lead))));\n  }))), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Blog, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Blog;\nexport var __N_SSG = true;\nexport default Blog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"sources":["/Users/cristian/cuby/website/pages/blog/index.tsx"],"names":["React","useRouter","Link","parseISO","format","ptBR","Header","Footer","Container","Cards","Blog","allPosts","router","cat","query","page","posts","slice","morPosts","length","filteredPosts","filter","item","categories","includes","toString","console","log","map","post","slug","maxWidth","coverImage","title","date","locale","lead"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router'\nimport Link from 'next/link';\n\nimport { parseISO, format } from 'date-fns'\nimport { ptBR } from 'date-fns/locale';\n\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\n\nimport { getAllPosts } from 'lib/api';\nimport Post from 'types/post';\n\nimport { Container, Cards } from './styles';\nimport { CardMeta } from 'semantic-ui-react';\n\n//** TO DO LIST: Menu flutuante com as categorias dos posts (curso, empreendedorismo, etc...) */\n\ntype Props = {\n  allPosts: Post[]\n}\n\nexport const getStaticProps = async () => {\n  const allPosts = getAllPosts([\n    'title',\n    'lead',\n    'categories',\n    'date',\n    'slug',\n    'author',\n    'coverImage',\n    'excerpt',\n  ])\n\n  return {\n    props: { allPosts },\n  }\n}\n\nconst Blog = ({ allPosts }: Props) => {\n  const router = useRouter();\n  const { cat } = router.query;\n\n  \n  var page = 'blog'\n  var posts = allPosts.slice(0,9)\n  var morPosts = allPosts.slice(10)\n\n  if(cat.length>0) {\n    let page = 'portfolio'\n    let filteredPosts = allPosts.filter(item => item.categories.includes(cat.toString()));\n    let posts = filteredPosts.slice(0,9)\n    let morPosts = filteredPosts.slice(10)\n  }\n\n  console.log(page);\n  return ( \n    <>\n      <Header page={page} />\n      <Container>\n\n        <Cards>\n            {posts.map((post) => (\n                <Link key={post.slug} href={`blog/posts/${post.slug}`} passHref>\n                  <a>\n                    <img\n                      style={{ maxWidth: 300 }}\n                      src={post.coverImage}\n                      alt={post.title}\n                    />\n                    <div>\n                      <span>{post.title}</span>\n                      <p className=\"data\">{format(parseISO(post.date), `d 'de' LLLL '/' yyyy`, { locale: ptBR })}\n                      {\n                        post.categories.map(item => (\n                          <span key={item}>{item}</span>\n                        ))\n                      }\n                      </p>\n                      <p className=\"lead\">{post.lead}</p>\n                    </div>\n                  </a>\n                </Link>\n            ))}\n          </Cards>\n\n      </Container>\n      <Footer />\n    </>\n  )\n};\n\nexport default Blog;\n"]},"metadata":{},"sourceType":"module"}